Question:

Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.
An input string is valid if:
Open brackets must be closed by the same type of brackets.
Open brackets must be closed in the correct order.
Every close bracket has a corresponding open bracket of the same type.
 
Example 1:

Input: s = "()"
Output: true
Example 2:

Input: s = "()[]{}"
Output: true
Example 3:

Input: s = "(]"
Output: false
 

Constraints:

1 <= s.length <= 104
s consists of parentheses only '()[]{}'.
Accepted
3.1M
Submissions
7.6M
Acceptance Rate
40.3%





code:

import java.util.*;
public class Main
{
	public static void main(String[] args) {
		Scanner sc=new Scanner(System.in);
		String str=sc.next();
	    System.out.print(func(str));
	}
	static boolean func(String s) {
        Stack<Character> stack = new Stack<>();
        for (char c : s.toCharArray()) {
            if (c == '(' || c == '{' || c == '[') 
            {
                stack.push(c);
            } 
            else if (c == ')' || c == '}' || c == ']') 
            {
                if (stack.isEmpty()) {
                    return false;
                }
                char opening = stack.pop();
                if ((opening == '(' && c != ')') ||
                    (opening == '{' && c != '}') ||
                    (opening == '[' && c != ']')) {
                    return false;
                }
            }
        }
        return stack.isEmpty();
    }
}
